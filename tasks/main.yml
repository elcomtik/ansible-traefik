# tasks file for kibatic.traefik
---
- name: Create Traefik systemd unit
  template:
    src: "{{ traefik_systemd_unit_template }}.j2"
    dest: "{{ traefik_systemd_unit_dest }}"
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload traefik unit
    - Restart traefik

- name: Ensure install & config directory exists
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ traefik_install_dir }}"

- name: Copy Traefik config file
  template:
    src: "{{ traefik_template }}.j2"
    dest: "{{ traefik_config_file }}"
    owner: root
    group: root
    mode: 0744
  notify:
    - Restart traefik

- name: Copy Traefik dynamic config files (if Traefik v2.x.x & file provider)
  template:
    src: "{{ item.src }}.j2"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0744
  with_items: "{{ traefik_dynamic_configs | list }}"
  when: traefik_dynamic_configs is defined
  notify:
    - Restart traefik

- name: Download untarred Traefik binary to bin path
  get_url:
    url: "{{ traefik_binary_url }}"
    dest: "{{ traefik_bin_path }}"
    owner: root
    group: root
    mode: 0755
    force: "{{ traefik_update }}"
  when: not traefik_binary_url.endswith(".tar.gz")
  notify:
    - Restart traefik

- name: Ensure tmp directory
  file:
    path: "{{ traefik_tmp_path }}"
    state: directory
  when: traefik_binary_url.endswith(".tar.gz")

- name: Download tarball & extract Traefik binary
  become: False
  unarchive:
    src: "{{ traefik_binary_url }}"
    remote_src: true
    dest: "{{ traefik_tmp_path }}"
    extra_opts:
      - 'traefik'
  register: _download_binary
  until: _download_binary is succeeded
  retries: 5
  delay: 2
  delegate_to: localhost
  run_once: true
  check_mode: false
  when: traefik_binary_url.endswith(".tar.gz")

- name: Copy extracted Traefik binary to bin path
  copy:
    src: "{{ traefik_tmp_path }}/traefik"
    dest: "{{ traefik_bin_path }}"
    owner: root
    group: root
    mode: 0755
    force: "{{ traefik_update }}"
  when: traefik_binary_url.endswith(".tar.gz")
  notify:
    - Restart traefik

- name: Setup log rotation if needed
  template:
    src: logrotate-traefik.j2
    dest: "{{ traefik_logrotate_config_path }}"
  when: traefik_log_rotation

- name: Ensure Traefik service is enabled and running
  systemd:
    name: traefik
    state: "{{ traefik_service_state }}"
    enabled: "{{ traefik_service_enabled }}"
    daemon_reload: true
  when: traefik_manage_service
